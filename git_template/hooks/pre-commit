#!/bin/bash
##
# Hook into git pre-commit event
# Run some tests when commiting
##

# Skip checks if this variable is defined
if [ "$SKIP_CUSTOM_CHECKS" = "true" ]; then
  exit 0
fi

##
# This script can be called from anywhere so it's good to be in the correct location
# This can also be called in .git/hooks dir and we need to get into project root
##
cd "$( dirname "${BASH_SOURCE[0]}" )"/../..

# git diff --name only gives project root relative paths
# we use this for making creating absolute paths
GIT_REPO=$(git rev-parse --show-toplevel)

#Check if binary exists
function command_available {
  return $(type $1 &> /dev/null)
}

# NOTE: This is currently not used anywhere
# Returns md5sum hash of file
# $1 - path to file
function print_md5sum {
  if command_available md5sum; then
    echo $( md5sum -r $1 | cut -d ' ' -f 1 )
  elif command_available openssl; then # use openssl as alternative
    echo $( cat $1 | openssl md5 )
  else
    >&2 echo "Can't generate md5 hashes. Install 'md5sum' or 'openssl'"
    exit 1
  fi
}

# Check php syntax
# $1 - filename where to check
function check_php_syntax {
  if command_available php; then
    # This is equivalent to running php with error_reporting E_ALL
    # If you want a little more permissive use 4095 (E_STRICT)
    return $(php -d error_reporting=32767 -l "$1" 1> /dev/null)
  else
    return 0 # Just return true if we can't check php files
  fi
}

# Check ruby syntax
# $1 - filename where to check
function check_ruby_syntax {
  if command_available ruby; then
    return $(ruby -c "$1" 1> /dev/null)
  else
    return 0 # Just return true if we can't check php files
  fi
}

# Check json syntax
# $1 - filename where to check
function check_json_syntax {
  if command_available python; then
    return $(cat "$1" | python -m json.tool > /dev/null 2>&1)
  else
    return 0 # Just return true if we can't use python
  fi
}

# Check if composer is valid
# $1 - path to composer.json where to check
function check_valid_composer {
  if command_available composer; then
    # Hide composer warnings on these checks
    composer validate $1 --no-check-all

  else
    return 0 # Just return true if we can't use composer
  fi
}

# Check if .travis.yml is valid
# $1 - path to .travis.yml where to check
function check_valid_travis {
  if command_available travis; then
    travis lint $1
  else
    return 0 # Just return true if we can't use travis gem
  fi
}

# Start checking the changed files
CHANGED_FILES=$(git diff --name-only --cached)
CHANGED_COUNT=$(git diff --name-only --cached | wc -l | tr -d '[[:space:]]')

# Loop all changed files
echo "==> Checking syntax errors in $CHANGED_COUNT committed files ..."
for FILE in $CHANGED_FILES; do
  resource="$GIT_REPO/$FILE"

  # Skip error checking if file was deleted in this commit
  if [ ! -f $resource ]; then
    continue
  fi

  # Check for merge conflict artifacts in the file
  merge_conflict_output=$(echo $FILE | xargs egrep '[><]{7}' -H -I --line-number)

  ## If the egrep command has any hits - echo a warning and exit with non-zero status.
  if [ $? == 0 ]
  then
      errors+=("WARNING: Possible git merge conflict artifacts in: $FILE")
      errors+=($merge_conflict_output)
  fi

  case "$resource" in
    *.php)
      if ! check_php_syntax $resource; then
        errors+=("PHP syntax error in: $FILE")
      fi
      ;;
    *.rb)
      if ! check_ruby_syntax $resource; then
        errors+=("Ruby syntax error in: $FILE")
      fi
      ;;
    *composer.json)
      if ! check_valid_composer $resource; then
        errors+=("Composer not valid or up to date: $FILE")
      fi
      ;;
    *.json)
      if ! check_json_syntax $resource; then
        errors+=("JSON syntax error in: $FILE")
      fi
      ;;
    .travis.yml)
      if ! check_valid_travis $resource; then
        errors+=("Travis syntax errors in: $FILE")
      fi
      ;;
    *.sql)
      errors+=("WARNING: SQL dump included: $FILE")
      ;;
    *) # This is default, do nothing please
    ;;
  esac
done

##
# Display all errors
##
if [ ${#errors[@]} -ne 0 ]; then
    echo "#######################"
    echo "### FOUND ${#errors[@]} ERRORS: ###"
    echo "#######################"
    for i in "${errors[@]}"
    do
        echo "==> $i"
    done
    echo "Skip these checks: $ run-it-please"
    exit 1
fi
